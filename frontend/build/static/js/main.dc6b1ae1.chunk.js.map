{"version":3,"sources":["redux/actions/auth.js","redux/actions/types.js","components/pacientes/PacienteLista.js","redux/actions/pacientes.js","containers/pacientes/Pacientes.js","containers/Home.js","containers/accounts/Login.js","containers/accounts/Signup.js","containers/accounts/Activate.js","containers/accounts/ResetPassword.js","containers/accounts/ResetPasswordConfirm.js","redux/reducers/auth.js","redux/reducers/pacientesReducer.js","redux/reducers/index.js","redux/store.js","components/Nav.js","hocs/Layout.js","App.js","index.js"],"names":["load_user","dispatch","a","localStorage","getItem","config","headers","axios","get","process","res","type","payload","data","PacienteLista","useDispatch","pacientes","useSelector","state","pacientesReducer","useEffect","then","catch","err","console","log","Pacientes","Home","className","class","to","role","connect","isAuthenticated","auth","login","email","password","body","JSON","stringify","post","useState","formData","setFormData","onChange","e","target","name","value","onSubmit","preventDefault","placeholder","required","minLength","signup","re_password","accountCreated","setAccountCreated","verify","uid","token","match","verified","setVerified","style","marginTop","onClick","params","reset_password","props","requestSent","setRequestSent","reset_password_confirm","new_password","re_new_password","initialState","access","refresh","user","loading","errors","action","combineReducers","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","logout","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","checkAuthenticated","code","children","App","exact","path","component","Login","Signup","ResetPassword","ResetPasswordConfirm","Activate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc6b1ae1.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    PASSWORD_RESET_SUCCESS,\r\n    PASSWORD_RESET_FAIL,\r\n    PASSWORD_RESET_CONFIRM_SUCCESS,\r\n    PASSWORD_RESET_CONFIRM_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    LOGOUT\r\n} from './types';\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'  \r\n            }           \r\n        };\r\n\r\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\r\n\r\n            if (res.data.code !== 'token_not_valid') {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n    \r\n            dispatch({\r\n                type: USER_LOADED_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(load_user());\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const signup = (name, email, password, re_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password, re_password });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\r\n\r\n        dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const verify = (uid, token) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ uid, token });\r\n\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\r\n\r\n        dispatch({\r\n            type: ACTIVATION_SUCCESS\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n    }\r\n};    \r\n\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n        dispatch({\r\n            type: PASSWORD_RESET_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_FAIL\r\n        });\r\n    }\r\n};  \r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_FAIL\r\n        });\r\n    };\r\n};\r\n    \r\nexport const logout = () => dispatch => {\r\n    dispatch ({\r\n        type: LOGOUT\r\n    });\r\n};","export const FETCH_PACIENTES_START = 'FETCH_PACIENTES';\r\nexport const FETCH_PACIENTES_SUCCESS = 'FETCH_PACIENTES_SUCCESS';\r\nexport const FETCH_PACIENTES_FAILURE = 'FETCH_PACIENTES_FAILURE';\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAIL = 'SIGNUP_FAIL';\r\nexport const ACTIVATION_SUCCESS = 'ACTIVATION_SUCCESS';\r\nexport const ACTIVATION_FAIL = 'ACTIVATION_FAIL';\r\nexport const USER_LOADED_SUCCESS = 'USER_LOADED_SUCCESS';\r\nexport const USER_LOADED_FAIL = 'USER_LOADED_FAIL';\r\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\r\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\r\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS';\r\nexport const PASSWORD_RESET_FAIL = 'PASSWORD_RESET_FAIL';\r\nexport const PASSWORD_RESET_CONFIRM_FAIL = 'PASSWORD_RESET_CONFIRM_FAIL';\r\nexport const PASSWORD_RESET_CONFIRM_SUCCESS = 'PASSWORD_RESET_CONFIRM_SUCCESS';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPacientes } from '../../redux/actions/pacientes';\r\nimport { load_user } from '../../redux/actions/auth';\r\nimport Paciente from '../../components/pacientes/Paciente';\r\n\r\n\r\nconst PacienteLista = () => {\r\n    const dispatch = useDispatch();\r\n    const pacientes = useSelector(state => state.pacientesReducer.pacientes)\r\n\r\n\r\n    useEffect(() => {\r\n        load_user();\r\n        dispatch(fetchPacientes());\r\n    }, [])\r\n    \r\n/*     if (!nombre || !nombre.length) {\r\n        return (\r\n            <p>NO HAY PACIENTES</p>\r\n        ) \r\n    } */\r\n    return (\r\n            <div>{console.log(pacientes)}</div>\r\n/*         <ul>\r\n            {id.map(id => \r\n                <Paciente \r\n                    nombre={nombre} \r\n                    apellidoPaterno={apellidoPaterno} \r\n                    email={email}\r\n                />\r\n            )}\r\n        </ul> */\r\n    ) \r\n}\r\n\r\nexport default PacienteLista;\r\n\r\n/*     const listaDePacientes = this.props.pacientes.map((paciente) => \r\n        <div key={paciente.id}>\r\n            {paciente.nombre} {paciente.apellidoPaterno}\r\n        </div>\r\n    ); */\r\n","import axios from 'axios';\r\nimport { \r\n    FETCH_PACIENTES_START, \r\n    FETCH_PACIENTES_SUCCESS, \r\n    FETCH_PACIENTES_FAILURE \r\n} from './types';\r\n\r\n\r\nexport const fetchPacientes = () => async dispatch => {\r\n    dispatch({ type: FETCH_PACIENTES_START });\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n            'Accept': 'application/json'\r\n        }\r\n    };\r\n\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/paciente/`, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH_PACIENTES_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch ({\r\n                type: FETCH_PACIENTES_FAILURE,\r\n            })\r\n            console.log(err)\r\n        })\r\n}\r\n\r\n","import React, { Fragment, useEffect }  from 'react';\r\n/* import AgregarPaciente from '../components/pacientes/AgregarPaciente' */\r\nimport PacienteLista from '../../components/pacientes/PacienteLista';\r\nimport  { checkAuthenticated, load_user } from '../../redux/actions/auth'\r\n\r\n\r\nconst Pacientes = () => {\r\n/*     useEffect(() => {\r\n        checkAuthenticated();\r\n        load_user();\r\n    }, []) */\r\n    return (\r\n        <Fragment>\r\n            <h1>Pacientes</h1>\r\n            <PacienteLista />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Pacientes;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => (\r\n    <div className='container'>\r\n        <div class='jumbotron mt-5'>\r\n            <h1 class='display-4'>Amülink</h1>\r\n            <p class='lead'>Desarrollo de Amülink</p>\r\n            <hr class='my-4' />\r\n            <p>Sistema de gestion de terapia</p>\r\n            <Link class='btn btn-primary btn-lg' to='/login' role='button'>Login</Link>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Home;","import React, { useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/actions/auth'\r\n\r\nconst Login = ({ login, isAuthenticated }) => {                \r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n    \r\n    const { email, password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        login(email, password);\r\n    };\r\n\r\n    if (isAuthenticated)\r\n        return <Redirect to='/' />;\r\n\r\n    return (\r\n        <div className='container mt-5'>\r\n            <h1>Sign In</h1>\r\n            <p>Sign into your Account</p>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='email'\r\n                        placeholder='Email'\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={e => onChange(e)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Password'\r\n                        name='password'\r\n                        value={password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Login</button>\r\n            </form>\r\n            <p className='mt-3'>\r\n                Don't have an account? <Link to='/signup'>Sign Up</Link>\r\n            </p>\r\n            <p className='mt-3'>\r\n                Forgot your Password? <Link to='/reset-password'>Reset Password</Link>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);","import React, { useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signup } from '../../redux/actions/auth'\r\n\r\nconst Signup = ({ signup, isAuthenticated }) => { \r\n    const [accountCreated, setAccountCreated] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        name:'',\r\n        email: '',\r\n        password: '',\r\n        re_password: ''\r\n    });\r\n    \r\n    const { name, email, password, re_password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (password === re_password) {\r\n            signup(name, email, password, re_password);\r\n            setAccountCreated(true);\r\n        }\r\n    };\r\n\r\n    if (isAuthenticated)\r\n        return <Redirect to='/' />;\r\n\r\n    if (accountCreated)\r\n        return <Redirect to='/login' />; \r\n    \r\n\r\n    return (\r\n        <div className='container mt-5'>\r\n            <h1>Sign Up</h1>\r\n            <p>Create your Account</p>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='text'\r\n                        placeholder='Name*'\r\n                        name='name'\r\n                        value={name}\r\n                        onChange={e => onChange(e)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='email'\r\n                        placeholder='Email*'\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={e => onChange(e)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Password*'\r\n                        name='password'\r\n                        value={password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        name='re_password'\r\n                        value={re_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Register</button>\r\n            </form>\r\n            <p className='mt-3'>\r\n                Already have an account? <Link to='/login'>Sign In</Link>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { signup })(Signup);","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { verify } from '../../redux/actions/auth'\r\n\r\nconst Activate = ({ verify, match }) => {                \r\n    const [verified, setVerified] = useState(false);\r\n\r\n    const verify_account = e => {\r\n        const uid = match.params.uid;\r\n        const token = match.params.token;\r\n\r\n        verify(uid, token);\r\n        setVerified(true);\r\n    };\r\n\r\n    if (verified)\r\n        return <Redirect to='/' />;\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div \r\n                className='d-flex flex-column justify-content-center align-items-center'\r\n                style={{ marginTop: '200px' }}\r\n            >\r\n                <h1>Verify your Account</h1>\r\n                <button\r\n                    onClick={verify_account}\r\n                    style={{ marginTop: '50px' }}\r\n                    type='button'\r\n                    className='btn btn-primary'\r\n                >\r\n                    Verify\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, { verify })(Activate);","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { reset_password } from '../../redux/actions/auth'\r\n\r\nconst ResetPassword = (props) => {                \r\n    const [requestSent, setRequestSent] = useState(false);\r\n    \r\n    const [formData, setFormData] = useState({\r\n        email: ''\r\n    });\r\n    \r\n    const { email } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.reset_password(email);\r\n        setRequestSent(true);\r\n    };\r\n    \r\n    if (requestSent)\r\n        return <Redirect to='/' />\r\n    return (\r\n        <div className='container mt-5'>\r\n            <h1>Request Password Reset:</h1>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='email'\r\n                        placeholder='Your Email'\r\n                        name='email'\r\n                        value={email}\r\n                        onChange={e => onChange(e)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n    \r\nexport default connect(null, { reset_password })(ResetPassword);","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { reset_password_confirm } from '../../redux/actions/auth'\r\n\r\nconst ResetPasswordConfirm = (props) => {                \r\n    const [requestSent, setRequestSent] = useState(false);\r\n\r\n    const [formData, setFormData] = useState({\r\n        new_password: '',\r\n        re_new_password: ''\r\n    });\r\n    \r\n    const { new_password, re_new_password } = formData;\r\n\r\n    const onChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const uid = props.match.params.uid;\r\n        const token = props.match.params.token;\r\n\r\n        props.reset_password_confirm(uid, token, new_password, re_new_password);\r\n        setRequestSent(true);\r\n    };\r\n            \r\n    if (requestSent)\r\n        return <Redirect to='/' />;\r\n    return (\r\n        <div className='container mt-5'>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='New Password'\r\n                        name='new_password'\r\n                        value={new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        className='form-control'\r\n                        type='password'\r\n                        placeholder='Confirm New Password'\r\n                        name='re_new_password'\r\n                        value={re_new_password}\r\n                        onChange={e => onChange(e)}\r\n                        minLength='6'\r\n                        required\r\n                    />\r\n                </div>\r\n                <button className='btn btn-primary' type='submit'>Reset Password</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);    ","import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    PASSWORD_RESET_SUCCESS,\r\n    PASSWORD_RESET_FAIL,\r\n    PASSWORD_RESET_CONFIRM_SUCCESS,\r\n    PASSWORD_RESET_CONFIRM_FAIL,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    LOGOUT\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    access: localStorage.getItem('access'),\r\n    refresh: localStorage.getItem('refresh'),\r\n    isAuthenticated: null,\r\n    user: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        case AUTHENTICATED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem('access', payload.access);\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                access: payload.access,\r\n                refresh: payload.refresh\r\n            }\r\n        case SIGNUP_SUCCESS:\r\n            return{\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case USER_LOADED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                user: payload\r\n            }\r\n        case AUTHENTICATED_FAIL:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case USER_LOADED_FAIL:\r\n            return {\r\n                ...state,\r\n                user: null\r\n            }\r\n        case LOGIN_FAIL:\r\n        case SIGNUP_FAIL:\r\n        case LOGOUT:\r\n            localStorage.removeItem('access');\r\n            localStorage.removeItem('refresh');\r\n            return {\r\n                ...state,\r\n                access: null,\r\n                refresh: null,\r\n                isAuthenticated: false,\r\n                user: null\r\n            }\r\n        case PASSWORD_RESET_SUCCESS:\r\n        case PASSWORD_RESET_FAIL:\r\n        case PASSWORD_RESET_CONFIRM_SUCCESS:\r\n        case PASSWORD_RESET_CONFIRM_FAIL:\r\n        case ACTIVATION_SUCCESS:\r\n        case ACTIVATION_FAIL:\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { \r\n    FETCH_PACIENTES_START, \r\n    FETCH_PACIENTES_SUCCESS, \r\n    FETCH_PACIENTES_FAILURE \r\n} from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    pacientes: [],\r\n    errors: '',\r\n};\r\n\r\n\r\nconst pacientesReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_PACIENTES_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case FETCH_PACIENTES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pacientes: action.payload,\r\n                loading: false,\r\n                errors: ''\r\n            }\r\n        case FETCH_PACIENTES_FAILURE:\r\n            return {\r\n                ...state,\r\n                errors: action.payload,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pacientesReducer;\r\n\r\n\r\n\r\n\r\n/* import { combineReducers } from 'redux';\r\nimport pacientesReducer from './pacientesReducer';\r\n\r\nexport default combineReducers({\r\n    pacientes: pacientesReducer\r\n}); */","import { combineReducers } from 'redux';\r\nimport auth from './auth'\r\nimport pacientesReducer from './pacientesReducer'\r\n\r\nexport default combineReducers({\r\n    auth,\r\n    pacientesReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState, \r\n    composeWithDevTools(applyMiddleware(...middleware)) \r\n);\r\n\r\nexport default store;","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../redux/actions/auth';\r\n\r\nconst Nav = ({ logout, isAuthenticated }) => {\r\n    const guestLinks = () => (\r\n        <Fragment>\r\n            <li className='nav-item'>\r\n                <Link className='nav-link' to='/login'>Login</Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <Link className='nav-link' to='/signup'>Sign Up</Link>\r\n            </li>\r\n        </Fragment>\r\n    );\r\n\r\n    const authLinks = () => (\r\n            <li className='nav-item'>\r\n                <a className='nav-link' href='#!' onClick={logout}>Logout</a>\r\n            </li>\r\n    );\r\n\r\n\r\n    return (\r\n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\r\n            <Link className='navbar-brand' to='/'>Navbar</Link>\r\n            <button \r\n                className='navbar-toggler' \r\n                type='button' \r\n                data-toggle='collapse' \r\n                data-target='#navbarNav' \r\n                aria-controls='navbarNav' \r\n                aria-expanded='false' \r\n                aria-label='Toggle navigation'\r\n            >\r\n                <span className='navbar-toggler-icon'></span>\r\n            </button>\r\n            <div className='collapse navbar-collapse' id='navbarNav'>\r\n                <ul className='navbar-nav'>\r\n                    <li className='nav-item active'>\r\n                        <Link className='nav-link' to='/'>Home <span className='sr-only'>(current)</span></Link>\r\n                    </li>\r\n                    {isAuthenticated ? authLinks() : guestLinks()}\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout } )(Nav);","import React, { useEffect } from 'react';\r\nimport Nav from '../components/Nav';\r\nimport { connect } from 'react-redux';\r\nimport { checkAuthenticated, load_user } from '../redux/actions/auth'\r\n\r\nconst Layout = (props) => {\r\n    useEffect(() => {\r\n        props.checkAuthenticated();\r\n        props.load_user();\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            <Nav />\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, { checkAuthenticated, load_user })(Layout);","import React from 'react'; \nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Pacientes from './containers/pacientes/Pacientes';\n\nimport Home from './containers/Home';\nimport Login from './containers/accounts/Login';\nimport Signup  from './containers/accounts/Signup';\nimport Activate from './containers/accounts/Activate';\nimport ResetPassword from './containers/accounts/ResetPassword';\nimport ResetPasswordConfirm from './containers/accounts/ResetPasswordConfirm';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Layout from './hocs/Layout';\n\n\nconst App = () => (\n    <Provider store={store}>\n        <Router>\n            <Layout>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route exact path='/pacientes' component={Pacientes} />\n                    <Route exact path='/login' component={Login} />\n                    <Route exact path='/signup' component={Signup} />\n                    <Route exact path='/reset-password' component={ResetPassword} />\n                    <Route exact path='/password/reset/confirm/:uid/:token' component={ResetPasswordConfirm} />\n                    <Route exact path='/activate/:uid/:token' component={Activate} />\n                </Switch>\n            </Layout>\n        </Router>\n    </Provider>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}